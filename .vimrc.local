" This file will be loaded at the end of .vimrc.
" This file is designed to add your own vim scripts or override the exVim's .vimrc settings.
call exproject#register_hotkey( 9  , 1, '<Leader>bj'       , ":EXProjectBuild<CR>"                                      , 'Rebuild project tree.' )
call exproject#register_hotkey( 5  , 1, '<Leader-CR>'          , ":call exproject#confirm_select('shift')<CR>"              , 'File: Split and open it. Folder: Open the folder in os file browser.' )
call exproject#register_hotkey( 5  , 1, '<Leader><CR>'          , ":call exproject#confirm_select('shift')<CR>"              , 'File: Split and open it. Folder: Open the folder in os file browser.' )
set fileencodings=ucs-bom,utf-8-bom,utf-8,cp936,gbk,big5,gb18030,ucs,euc-jp,euc-kr,latin1
set wrap
set linebreak
set nolist

nnoremap <silent> <F9> :TagbarToggle<CR>

nnoremap <leader>jd :YcmCompleter GoTo<CR>

" set foldenable
set foldmethod=syntax
" set foldcolumn=0
" setlocal foldlevel=1        " 设置折叠层数为
" set foldlevelstart=99       " 打开文件是默认不折叠代码
"set foldclose=all          " 设置为自动关闭折叠                
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

map <Leader>bn :MBEbn
map <Leader>bp :MBEbp
map <Leader>bf :MBEbf
map <Leader>bb :MBEbb
" map <Leader>bd :MBEbd
map <Leader>bw :MBEbw
map <Leader>bun :MBEbun

set tags+=~/include/tags,~/system_include/tags
let g:Exconfig_Global_Tags='/home/okhowang/include/tags,/home/okhowang/system_include/tags'

set grepprg=ag\ --nogroup\ --nocolor

nnoremap <S-k> :Man <C-R>=expand("<cword>")<CR><CR>

" set ai
" set si
" set cin
" set cinoptions=:0,g0,t0,l1,Ls,W4,+8,N0
" function! IndentNamespace()
    " let l:cline_num = line('.')
    " let l:pline_num = prevnonblank(l:cline_num - 1)
    " let l:pline = getline(l:pline_num)
    " let l:retv = cindent('.')
    " while l:pline =~# '\(^\s*{\s*\|^\s*//\|^\s*/\*\|\*/\s*$\)'
        " let l:pline_num = prevnonblank(l:pline_num - 1)
        " let l:pline = getline(l:pline_num)
    " endwhile
    " if l:pline =~# '^\s*namespace.*'
        " let l:retv = 0
    " endif
    " return l:retv
" endfunction
" setlocal indentexpr=IndentNamespace()
" inoremap ( ()<ESC>i
" inoremap [ []<ESC>i
" inoremap { {}<ESC>i
" inoremap < <><ESC>i
" map <S-X> :lopen<CR>
" map <S-C> :lclose<CR>
set cursorline
set cursorcolumn
